name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # prevent loops
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test || echo "No tests found, would add tests in a real project"

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build, Scan, and Push (GHCR)
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write   # <-- allow push to GHCR with GITHUB_TOKEN
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME_RAW: ${{ github.repository }}             # e.g., Owner/Repo
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image names (lowercase)
        id: names
        run: |
          IMAGE_NAME_LC=$(echo "${IMAGE_NAME_RAW}" | tr '[:upper:]' '[:lower:]')
          echo "image_repo=${REGISTRY}/${IMAGE_NAME_LC}" >> $GITHUB_OUTPUT
          echo "sha_tag=sha-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "short_tag=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Extract Docker metadata (labels & tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image_repo }}
          tags: |
            type=sha,format=long     # sha-<40>
            type=ref,event=branch    # <branch>
            latest

      # Build once and load into the local Docker engine (so Trivy can scan)
      - name: Build (load locally)
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Scan the locally built image before pushing
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.names.outputs.image_repo }}:${{ steps.names.outputs.sha_tag }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Push the tags that were loaded locally (avoid a second rebuild)
      - name: Push all tags
        run: |
          for TAG in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            echo "Pushing $TAG"
            docker push "$TAG"
          done

      - name: Set image tag output
        id: set_output
        run: echo "image_tag=${{ steps.names.outputs.short_tag }}" >> $GITHUB_OUTPUT

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write   # allow committing back to repo
    steps:
      - uses: actions/checkout@v4

      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Kubernetes deployment file
        env:
          IMAGE: ghcr.io/${{ github.repository }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          NEW_IMAGE="$(echo "${IMAGE}:${IMAGE_TAG}" | tr '[:upper:]' '[:lower:]')"
          # Replace only the value, not the key
          sed -i "s|^\(\s*image:\s*\).*|\1${NEW_IMAGE}|" kubernetes/deployment.yaml
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -n "image:" -n kubernetes/deployment.yaml | head -1

      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes image to sha-${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push
